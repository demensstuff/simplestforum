package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"simplestforum/internal/delivery/api/apimodel"
	"simplestforum/internal/delivery/gql"
	"simplestforum/internal/domain"
	"simplestforum/internal/domain/entity"
	"simplestforum/internal/dto"
)

// AddUser is the resolver for the addUser field.
func (r *mutationResolver) AddUser(ctx context.Context, u apimodel.AddUserInput) (*apimodel.User, error) {
	sess := entity.GetSession(ctx)
	if sess.IsAuthorized() {
		return nil, domain.ErrAuthorized
	}

	user, err := r.User.Add(sess, dto.UserAddFromRest(&u))
	if err != nil {
		return nil, err
	}

	return dto.UserToRest(user), nil
}

// EditUser is the resolver for the editUser field.
func (r *mutationResolver) EditUser(ctx context.Context, u apimodel.EditUserInput) (*apimodel.User, error) {
	sess := entity.GetSession(ctx)
	if !sess.IsAuthorized() {
		return nil, domain.ErrNotAuthorized
	}

	user, err := r.User.Edit(sess, dto.UserEditFromRest(&u, sess.UserID))
	if err != nil {
		return nil, err
	}

	return dto.UserToRest(user), nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id int64) (bool, error) {
	sess := entity.GetSession(ctx)
	if !sess.IsAuthorized() {
		return false, domain.ErrNotAuthorized
	}

	err := r.User.Delete(sess, id)

	return err == nil, err
}

// ShowUser is the resolver for the showUserByID field.
func (r *queryResolver) ShowUser(ctx context.Context, id int64) (*apimodel.User, error) {
	sess := entity.GetSession(ctx)

	user, err := r.User.ByID(sess, id)
	if err != nil {
		return nil, err
	}

	return dto.UserToRest(user), nil
}

// ShowUsers is the resolver for the showUsers field.
func (r *queryResolver) ShowUsers(ctx context.Context, f *apimodel.UserFilters, p *apimodel.Pagination, s *apimodel.UserSort) ([]*apimodel.User, error) {
	sess := entity.GetSession(ctx)

	users, err := r.User.All(sess, dto.UserFiltersFromRest(f), dto.PaginationFromRest(p), dto.UserSortFromRest(s))
	if err != nil {
		return nil, err
	}

	return dto.UsersToRest(users), nil
}

// Mutation returns gql.MutationResolver implementation.
func (r *Resolver) Mutation() gql.MutationResolver { return &mutationResolver{r} }

// Query returns gql.QueryResolver implementation.
func (r *Resolver) Query() gql.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
