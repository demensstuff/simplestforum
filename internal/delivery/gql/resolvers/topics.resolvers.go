package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"simplestforum/internal/delivery/api/apimodel"
	"simplestforum/internal/domain"
	"simplestforum/internal/domain/entity"
	"simplestforum/internal/dto"
)

// AddTopic is the resolver for the addTopic field.
func (r *mutationResolver) AddTopic(ctx context.Context, t apimodel.AddTopicInput) (*apimodel.Topic, error) {
	sess := entity.GetSession(ctx)
	if !sess.IsAuthorized() {
		return nil, domain.ErrNotAuthorized
	}

	topic, err := r.Topic.Add(sess, dto.TopicAddFromRest(&t))
	if err != nil {
		return nil, err
	}

	return dto.TopicToRest(topic), nil
}

// EditTopic is the resolver for the editTopic field.
func (r *mutationResolver) EditTopic(ctx context.Context, t apimodel.EditTopicInput) (*apimodel.Topic, error) {
	sess := entity.GetSession(ctx)
	if !sess.IsAuthorized() {
		return nil, domain.ErrNotAuthorized
	}

	topic, err := r.Topic.Edit(sess, dto.TopicEditFromRest(&t))
	if err != nil {
		return nil, err
	}

	return dto.TopicToRest(topic), nil
}

// DeleteTopic is the resolver for the deleteTopic field.
func (r *mutationResolver) DeleteTopic(ctx context.Context, id int64) (bool, error) {
	sess := entity.GetSession(ctx)
	if !sess.IsAuthorized() {
		return false, domain.ErrNotAuthorized
	}

	err := r.Topic.Delete(sess, id)

	return err == nil, err
}

// ShowTopic is the resolver for the showTopic field.
func (r *queryResolver) ShowTopic(ctx context.Context, id int64) (*apimodel.Topic, error) {
	sess := entity.GetSession(ctx)

	topic, err := r.Topic.ByID(sess, id)
	if err != nil {
		return nil, err
	}

	return dto.TopicToRest(topic), nil
}

// ShowTopics is the resolver for the showTopics field.
func (r *queryResolver) ShowTopics(ctx context.Context, f *apimodel.TopicFilters, p *apimodel.Pagination, s *apimodel.TopicSort) ([]*apimodel.Topic, error) {
	sess := entity.GetSession(ctx)

	topics, err := r.Topic.All(sess, dto.TopicFiltersFromRest(f), dto.PaginationFromRest(p), dto.TopicSortFromRest(s))
	if err != nil {
		return nil, err
	}

	return dto.TopicsToRest(topics), nil
}
