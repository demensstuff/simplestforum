package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"simplestforum/internal/delivery/api/apimodel"
	"simplestforum/internal/domain"
	"simplestforum/internal/domain/entity"
	"simplestforum/internal/dto"
)

// AddPost is the resolver for the addPost field.
func (r *mutationResolver) AddPost(ctx context.Context, p apimodel.AddPostInput) (*apimodel.Post, error) {
	sess := entity.GetSession(ctx)
	if !sess.IsAuthorized() {
		return nil, domain.ErrNotAuthorized
	}

	post, err := r.Post.Add(sess, dto.PostAddFromRest(&p))
	if err != nil {
		return nil, err
	}

	return dto.PostToRest(post), nil
}

// EditPost is the resolver for the editPost field.
func (r *mutationResolver) EditPost(ctx context.Context, p apimodel.EditPostInput) (*apimodel.Post, error) {
	sess := entity.GetSession(ctx)
	if !sess.IsAuthorized() {
		return nil, domain.ErrNotAuthorized
	}

	post, err := r.Post.Edit(sess, dto.PostEditFromRest(&p))
	if err != nil {
		return nil, err
	}

	return dto.PostToRest(post), nil
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id int64) (bool, error) {
	sess := entity.GetSession(ctx)
	if !sess.IsAuthorized() {
		return false, domain.ErrNotAuthorized
	}

	err := r.Post.Delete(sess, id)

	return err == nil, err
}

// ShowPost is the resolver for the showPost field.
func (r *queryResolver) ShowPost(ctx context.Context, id int64) (*apimodel.Post, error) {
	sess := entity.GetSession(ctx)

	post, err := r.Post.ByID(sess, id)
	if err != nil {
		return nil, err
	}

	return dto.PostToRest(post), nil
}

// ShowPosts is the resolver for the showPosts field.
func (r *queryResolver) ShowPosts(ctx context.Context, f *apimodel.PostFilters, p *apimodel.Pagination, s *apimodel.PostSort) ([]*apimodel.Post, error) {
	sess := entity.GetSession(ctx)

	posts, err := r.Post.All(sess, dto.PostFiltersFromRest(f), dto.PaginationFromRest(p), dto.PostSortFromRest(s))
	if err != nil {
		return nil, err
	}

	return dto.PostsToRest(posts), nil
}
